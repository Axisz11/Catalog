package narkoman.jpa;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

public class Application {

    public static void main(String[] args) throws Exception {

        // 'Maven' - это система автоматизированной сборки для Java проектов. Позволяет не заморачиваться с ручным
        // подключением внешних библиотек и их конфигураций.

        // 'pom.xml' - конфигурационный файл для системы сборки 'Maven' который должен находится в корневом каталоге
        // проекта. В данном файле конфигурации можно указать какие именно библиотеки и версия этих библиотек
        // должны использоваться проектом, как именно должен собираться проект и т.д.

        // 'mvnrepository.org' - центральное хранилище 'Java' пакетов и библиотек которые можно подключать к себе
        // в проект с целью дальнейшего использования.

        // 'JDBC' (Java DataBase Connectivity) - модуль стандартной 'Java' который позволяет взаимодействовать с
        // базой данных по средствам написания запросов на нативном 'SQl' и получения результата через стандартный
        // объект 'ResultSet'. 'ResultSet' - не дает четкого понимания о том какие именно поля фигурируют в
        // результате запроса т.е. разработчик обращается к полям почти в слепую.

        // 'DriverManager' - класс предназначенный для получения объекта подключения к базе данных т.е. 'Connection'.

        // Для того чтобы работать из языка программирования с любой базой данных необходима специальная прослойка
        // в виде драйвера.
        // 'PostgreSQL' -> 'PostgreSQL Java Driver' -> Java
        //              -> 'PostgreSQL C++ Driver' -> C++
        //              -> 'PostgreSQl PHP Driver' -> PHP

        // 'DriverManager.getConnection(
        // String url, String user, String password
        // ) : Connection' - производит подключение к базе данных по 'JDBC' строке подключения из параметров 'url'
        // от имени пользователя из параметра 'user' и пароля из параметров 'password'. Подключение будет получено
        // только если в 'classpath' проекта есть драйвер для работы с требуемой базой данных.

        // 'JDBC' строка подключения записывается в следующем формате:
        // jdbc:<jdbc обозначение базы данных>://<хост>:<порт>/<название базы данных>'

        // * 'jdbc обозначение базы данных' - у каждой базы данных в рамках 'JDBC' есть своё название, например для
        // 'PostgreSQl' это название 'postgresql' и т.д. .

        // * 'хост' - адрес сервера либо доменное имя на котором работает сервер базы данных.

        // * 'порт' - порт к которому привязан сервер базы данных.

        // * 'название базы данных' - название базы данных к которой необходимо подключиться.

        // 'Connection' - это объект который хранит в себе подключение к базе данных по переданным ранее параметрам.

        // 'NoSuitableDriverFound' - для организации подключения по переданным параметрам нет подходящего драйвера
        // в 'classpath'.

        Connection connection = DriverManager.getConnection(
                "jdbc:postgresql://localhost:5432/pseudo_shop", "postgres", "1488"
        );


        // 'Statement' - объект предназначенный для выполнения нативных (SQL диалект специфичный для отдельно взятой
        // базы данных) запросов к базе данных.

        // ' *.execute(String sql) : boolean ' - метод который отправляет на выполнение запрос из параметра 'sql'
        // в базу данных. В случае успешного выполнения возвращает 'true',  в ином случае 'false'.

        // 'ResultSet' - объект хранящий информацию о результате 'select' запроса, при помощи данного объекта можно
        // перебирать результатирующие записи и брать  информацию по полям. По умолчанию 'ResultSet' не хранит ссылку на
        // какую-то конкретную запись, что может приводить к ошибкам.

        // ' *next() : boolean ' - переключается на следующую по порядку запись начиная с первой. Если переключение
        // было успешным возвращает 'true', если записей больше нет, 'false'.

//
//        Statement statement = connection.createStatement();
//
//        String query = "select * from users";
//
//        if (statement.execute(query)) {
//            ResultSet resultSet = statement.getResultSet();

//            resultSet.next();  Переключаемся на первую запись.
//            System.out.println(resultSet.getLong("id"));  Берём 'id' первой записи.
//            System.out.println(resultSet.getString("name"));  Берём 'first_name' первой записи.
//
//            resultSet.next(); // Переключаемся на вторую запись.
//            System.out.println(resultSet.getLong("id"));  Берём 'id' второй записи.
//            System.out.println(resultSet.getString("name"));  Берём 'name' второй записи.

//
//        while(resultSet.next()) {
//            System.out.println("id " + resultSet.getLong("id") + " -> " + resultSet.getString("name") + " " + resultSet.getString("surname") + " " + resultSet.getString("patronymic") + " " + resultSet.getDate("reg_date"));
//            }
//        }

    // Транзакция - это группа запросов собранных в один большой запрос который отправляется на выполнение в базу данных.
    // Транзакция гарантирует полное выполнение всех запросов которые в нее входят.

    // transaction -> {
    //   insert ... -> correct
    //   update ... -> correct
    //   update ... -> error
    //   update ... ->
    // } -> error -> rollback (отмена всех изменений которые были сделаны в рамках транзакции)

    // transaction -> {
    //   insert ... -> correct
    //   update ... -> correct
    //   update ... -> correct
    //   update ... -> correct
    // } -> correct -> commit (подтверждение результата работы всех запросов выполненных в рамках транзакции)

    // Транзакция работает по принципу либо выполняется все, либо ничего, что и гарантирует целостность данных.

    // Любое действие в рамках JPA изменяющее данные (insert, update, delete) должны выполнятся в рамках транзакции в обязательном
    // порядке.

    // entityManager.getTransaction() : EntityTransaction - возвращает объект транзакции актуальной на момент вызова.

    // EntityTransaction - объект описывающий транзакцию в базе данных.
    // - begin() : void - начинает новую транзакцию в базе данных.
    // - commit() : void - отправляет на выполнение в базу все запросы которые были добавлены в транзакцию после ее создания.
    // - rollback() : void - отменяет результат работы всех запросов которые были выполнены в рамках последней транзакции.

     // EntityManager.persist(Object o) : void - привязывает сущность локально к объекту EntityManager, после подтверждения
     // транзакция привязанная сущность отправляется в базу данных.
    }
}
